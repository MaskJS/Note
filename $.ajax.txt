jQuery.post(url,data,success(data, textStatus, jqXHR),dataType)
$(selector).get(url,data,success(response,status,xhr),dataType)

JQuery中$.ajax()方法参数详解 (2010-08-02 15:26:36)

标签： jquery ajax each it	分类： JQuery


url: 要求为String类型的参数，（默认为当前页地址）发送请求的地址。
type: 要求为String类型的参数，请求方式（post或get）默认为get。注意其他http请求方法，例如put和
      delete也可以使用，但仅部分浏览器支持。
timeout: 要求为Number类型的参数，设置请求超时时间（毫秒）。此设置将覆盖$.ajaxSetup()方法的全局设
         置。
async：要求为Boolean类型的参数，默认设置为true，所有请求均为异步请求。
       如果需要发送同步请求，请将此选项设置为false。注意，同步请求将锁住浏览器，用户其他操作必须等
       待请求完成才可以执行。
cache：要求为Boolean类型的参数，默认为true（当dataType为script时，默认为false）。
       设置为false将不会从浏览器缓存中加载请求信息。
data: 要求为Object或String类型的参数，发送到服务器的数据。如果已经不是字符串，将自动转换为字符串格
      式。get请求中将附加在url后。防止这种自动转换，可以查看processData选项。对象必须为key/value格
      式，例如{foo1:"bar1",foo2:"bar2"}转换为&foo1=bar1&foo2=bar2。如果是数组，JQuery将自动为不同
      值对应同一个名称。例如{foo:["bar1","bar2"]}转换为&foo=bar1&foo=bar2。
dataType: 要求为String类型的参数，预期服务器返回的数据类型。如果不指定，JQuery将自动根据http包mime
          信息返回responseXML或responseText，并作为回调函数参数传递。
          可用的类型如下：
          xml：返回XML文档，可用JQuery处理。
          html：返回纯文本HTML信息；包含的script标签会在插入DOM时执行。
          script：返回纯文本JavaScript代码。不会自动缓存结果。除非设置了cache参数。注意在远程请求
                  时（不在同一个域下），所有post请求都将转为get请求。
          json：返回JSON数据。
          jsonp：JSONP格式。使用SONP形式调用函数时，例如myurl?callback=?，JQuery将自动替换后一个
                “?”为正确的函数名，以执行回调函数。
          text：返回纯文本字符串。
beforeSend：要求为Function类型的参数，发送请求前可以修改XMLHttpRequest对象的函数，例如添加自定义
            HTTP头。在beforeSend中如果返回false可以取消本次ajax请求。XMLHttpRequest对象是惟一的参
            数。
            function(XMLHttpRequest){
               this;   //调用本次ajax请求时传递的options参数
            }
complete：要求为Function类型的参数，请求完成后调用的回调函数（请求成功或失败时均调用）。
          参数：XMLHttpRequest对象和一个描述成功请求类型的字符串。
          function(XMLHttpRequest, textStatus){
             this;    //调用本次ajax请求时传递的options参数
          }
success：要求为Function类型的参数，请求成功后调用的回调函数，有两个参数。
         (1)由服务器返回，并根据dataType参数进行处理后的数据。
         (2)描述状态的字符串。
         function(data, textStatus){
            //data可能是xmlDoc、jsonObj、html、text等等
            this;  //调用本次ajax请求时传递的options参数
error：要求为Function类型的参数，请求失败时被调用的函数。该函数有3个参数，即XMLHttpRequest对象、错
       误信息、捕获的错误对象(可选)。
       ajax事件函数如下：
       function(XMLHttpRequest, textStatus, errorThrown){
          //通常情况下textStatus和errorThrown只有其中一个包含信息
          this;   //调用本次ajax请求时传递的options参数

		   $("div").html(textStatus);
		   $("div").append("<br/>"XMLHttpRequest.status);
		   $("div").append("<br/>"XMLHttpRequest.readyState);
		   $("div").append("<br/>"XMLHttpRequest.responseText);
       }
contentType：要求为String类型的参数，当发送信息至服务器时，内容编码类型默认
             为"application/x-www-form-urlencoded"。该默认值适合大多数应用场合。
dataFilter：要求为Function类型的参数，给Ajax返回的原始数据进行预处理的函数。
            提供data和type两个参数。data是Ajax返回的原始数据，type是调用jQuery.ajax时提供的
            dataType参数。函数返回的值将由jQuery进一步处理。
            function(data, type){
                //返回处理后的数据
                return data;
            }
global：要求为Boolean类型的参数，默认为true。表示是否触发全局ajax事件。设置为false将不会触发全局
        ajax事件，ajaxStart或ajaxStop可用于控制各种ajax事件。
ifModified：要求为Boolean类型的参数，默认为false。仅在服务器数据改变时获取新数据。
            服务器数据改变判断的依据是Last-Modified头信息。默认值是false，即忽略头信息。
jsonp：要求为String类型的参数，在一个jsonp请求中重写回调函数的名字。
       该值用来替代在"callback=?"这种GET或POST请求中URL参数里的"callback"部分，例如
       {jsonp:'onJsonPLoad'}会导致将"onJsonPLoad=?"传给服务器。
username：要求为String类型的参数，用于响应HTTP访问认证请求的用户名。
password：要求为String类型的参数，用于响应HTTP访问认证请求的密码。
processData：要求为Boolean类型的参数，默认为true。默认情况下，发送的数据将被转换为对象（从技术角度
             来讲并非字符串）以配合默认内容类型"application/x-www-form-urlencoded"。如果要发送DOM
             树信息或者其他不希望转换的信息，请设置为false。
scriptCharset：要求为String类型的参数，只有当请求时dataType为"jsonp"或者"script"，并且type是GET时
               才会用于强制修改字符集(charset)。通常在本地和远程的内容编码不同时使用。
 
案例代码：
$(function(){
    $('#send').click(function(){
         $.ajax({
             type: "GET",
             url: "test.json",
             data: {username:$("#username").val(), content:$("#content").val()},
             dataType: "json",
             success: function(data){
                         $('#resText').empty();   //清空resText里面的所有内容
                         var html = ''; 
                         $.each(data, function(commentIndex, comment){
                               html += '<div class="comment"><h6>' + comment['username']
                                         + ':</h6><p class="para"' + comment['content']
                                         + '</p></div>';
                         });
                         $('#resText').html(html);
                      },
	      error: function (XMLHttpRequest, textStatus, errorThrown) {

            }
         });
    });
});
 
顺便说一下$.each()函数:
$.each()函数不同于JQuery对象的each()方法，它是一个全局函数，不操作JQuery对象，而是以一个数组或者对象作为第1个参数，以一个回调函数作为第2个参数。回调函数拥有两个参数：第1个为对象的成员或数组的索引，第2个为对应变量或内容。



JS  知识点

1、map() 把每个元素通过函数传递到当前匹配集合中，生成包含返回值的新的 jQuery 对象。
   定义： .map(callback(index,domElement))
eg:
<input type="checkbox" value="8" id="eight" name="number[]">
获得复选框 ID 组成的逗号分隔的列表：
$(':checkbox').map(function() {
  return this.id;
}).get().join(',');

2、concat() 方法用于连接两个或多个数组。
   定义： arrayObject.concat(arrayX,arrayX,......,arrayX)

3、 .replace()  替换
   str.replace(/David/g, "Darren");    全局替换，区分大小写
   str.replace(/david/gi, "Darren");   全局替换，忽略大小写

4、.slice()  数组的 slice 方法通常用来从一个数组中抽取片断;这个方法还可以用来将“类数组”元素（比如 arguments 参数列表、节点列表和属性列表）转换成真正的数组
    var nodesArr = Array.prototype.slice.call(document.querySelectorAll("div"));  
    // 得到一个由 div 元素组成的“真正的”数组  
    
    var argsArr = Array.prototype.slice.call(arguments);  
    // 把 arguments 转换成一个“真正的”数组  

5、 .sort()  数组排序 不仅可以对简单类型的数组项进行排序，可以通过属性来排序对象

    [1, 3, 9, 2].sort();
    // 返回 [1, 2, 3, 9]  

    //对属性进行排序
    [  
        { name: "Robin Van PurseStrings", age: 30 },  
        { name: "Theo Walcott", age: 24 },  
        { name: "Bacary Sagna", age: 28  }  
    ].sort(function(obj1, obj2) {  
        // 实现增序排列：前者的 age 小于后者  
        return obj1.age - obj2.age;  
    });  
        // Returns:    
        // [  
        //    { name: "Theo Walcott", age: 24 },  
        //    { name: "Bacary Sagna", age: 28  },  
        //    { name: "Robin Van PurseStrings", age: 30 }  
    // ] 

6、数组置空，用  myArray.length = 0;   用myArray = [];会新建一个空数组，而没有将原数组置空
   查询数组中特定元素      $.Array(数组，元素)   返回下标，没有找到则返回-1

7、push 来合并数组
   var mergeTo = [4,5,6];  
   var mergeFrom = [7,8,9];        
   Array.prototype.push.apply(mergeTo, mergeFrom);        
   mergeTo; // is: [4, 5, 6, 7, 8, 9]  

8、高效探测功能特性和对象属性
   探测浏览器的某个特性：
   if("geolocation" in navigator) {  
        // Do some stuff  
        // 在这里干点事情  
    } 

9、事件对象的 preventDefault 和 stopPropagation 方法   取消事件的默认动作。
   例如，如果 type 属性是 "submit"，在事件传播的任意阶段可以调用任意的事件句柄，通过调用该方法，可以阻止提交表单。
注意，如果 Event 对象的 cancelable 属性是 fasle，那么就没有默认动作，或者不能阻止默认动作。无论哪种情况，调用该方法都没有作用。

防止链接打开 URL：
$("a").click(function(event){
    event.preventDefault();
});

10、js循环遍历for,forin,foreach,forof,map 优化的普通for循环效率最高
    使用临时变量，将长度缓存起来，避免重复获取数组长度
    for(j = 0,len=arr.length; j < len; j++) {
   }

11、localStorage和cookie类似，但是没有时间限制

判断浏览器是否支持localStorage
if(window.localStorage){
    alert('你的浏览器支持localStorage!');
}else{
    alert('浏览器不支持localStorage!');
}

localStorage是以key/value方式来进行存储的，并且value只能是字符串形式，如果你要使用其他数据类型，需要进行相应的转换。设置和获取localStorage方法是使用localStorage.key，或localStorage[key]的形式，如：
也可以使用localStorage自带方法getItem()、setItem()和removeItem()来进行相应的获取、设置和移除localStorage项。
localStorage.myName='walkingp';
localStorage['mySite']='http://www.cnblogs.com/walkingp';
alert('name:' + localStorage.myName + '\rsite:' + localStorage['mySite']);

12.去掉所有空格  str.replace(/ /g,'')

13.   JSON.stringify(参数1[，参数2，参数3])  函数用法，主要是将json字符串转为json对象
    （1）参数1必须填，即为需要转化的字符串
	（2）参数2可以为函数和数组，为函数时会将对应的字符串传到函数中然后返回
		 为数组时，如参数1为数组则参数2数组会忽略，如参数1位对象则会是如下情况
		var students = new Object();
		students.name = "pika";
		students.age = 19;
		students.qq = "12345678";
		var stu= new Array();
		stu[0] = "name";
		stu[1] = "qq";
		var json = JSON.stringify(students,stu);
		alert(json);
		//输出结果：{"name":"pika","qq":"12345678"}
     （3）参数3为缩进单位，eg:
		    var students = new Object();
			students.name = "pika";
			students.age = 19;
			students.qq = "12345678";
			var stu= new Array();
			stu[0] = "name";
			stu[1] = "qq";
			var json = JSON.stringify(students,stu,"test")
			alert(json);
			/* 输出结果：
			{
			test"name": "pika",
			test"qq": "12345678"
			}
			*/
    
























